 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>2 Player Snake</title>
    <style>
        #webgl {
            border: 5px solid white;
        }
    </style>
</head>
<body onload="main()" style="margin: 0; overflow: hidden; background-color: black;">
    <canvas id="webgl" width="550" height="550">
        Please use a browser that supports "canvas"
    </canvas>
    <div style="position: absolute; top: 10px; left: 10px; color: white; font-size: 20px;">
        Green Score: <span id="greenScore">0</span> | Red Score: <span id="redScore">0</span>
    </div>

    <script src="https://rawgit.com/huningxin/webglbook_examples/master/lib/webgl-utils.js"></script>
    <script src="https://rawgit.com/huningxin/webglbook_examples/master/lib/webgl-debug.js"></script>
    <script src="https://rawgit.com/huningxin/webglbook_examples/master/lib/cuon-utils.js"></script>
    <script src="https://rawgit.com/huningxin/webglbook_examples/master/lib/cuon-matrix.js"></script>
    <script type="text/javascript">
        var VSHADER_SOURCE =
            'attribute vec4 a_Position;\n' +
            'attribute vec4 a_Color;\n' +
            'uniform mat4 u_ModelMatrix;\n' +
            'varying vec4 v_Color;\n' +
            'void main() {\n' +
            '  gl_Position = u_ModelMatrix * a_Position;\n' +
            '  v_Color = a_Color;\n' +
            '}\n';

        var FSHADER_SOURCE =
            'precision mediump float;\n' +
            'varying vec4 v_Color;\n' +
            'void main() {\n' +
            '  gl_FragColor = v_Color;\n' +
            '}\n';

        var greenSnake = [{x: -0.5, y: 0.0}];
        var redSnake = [{x: 0.5, y: 0.0}];
        var greenDirection = {dx: 0.0, dy: 0.0}; // Initially stopped
        var redDirection = {dx: 0.0, dy: 0.0};   // Initially stopped
        var lastGreenDirection = {dx: 0.0, dy: 0.0};
        var lastRedDirection = {dx: 0.0, dy: 0.0};
        var foodPositions = [];
        var greenScore = 0, redScore = 0;
        var modelMatrix = new Matrix4();
        var buffers = { green: null, red: null, food: null };
        var gameStarted = false; // Movement paused until the first input
        var WIN_SCORE = 20;

        function main() {
            var canvas = document.getElementById('webgl');
            var gl = getWebGLContext(canvas);
            if (!gl) {
                console.log('Failed to get the rendering context for WebGL');
                return;
            }

            if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
                console.log('Failed to initialize shaders.');
                return;
            }

            var u_ModelMatrix = gl.getUniformLocation(gl.program, 'u_ModelMatrix');
            if (!u_ModelMatrix) {
                console.log('Failed to get the storage location of u_ModelMatrix');
                return;
            }
            // Add keyboard event listener
            document.addEventListener('keydown', function (ev) {
                changeDirection(ev);
            });

            // Initialize game elements
            initFood(); // Generate initial food positions
            buffers.green = initBuffer(gl); // Buffer for green snake
            buffers.red = initBuffer(gl);   // Buffer for red snake
            buffers.food = initBuffer(gl); // Buffer for food

            // Set initial buffer data
            updateBuffer(gl, buffers.green, greenSnake, [0.0, 1.0, 0.0]); // Green snake color
            updateBuffer(gl, buffers.red, redSnake, [1.0, 0.0, 0.0]);     // Red snake color
            updateBuffer(gl, buffers.food, foodPositions, [1.0, 1.0, 0.0]); // Food color

            // Animation loop
            var tick = function() {
                if (gameStarted) {
                    updatePositions(gl); // Update snake positions and handle collisions
                }
                draw(gl, u_ModelMatrix); // Render the game
                requestAnimationFrame(tick); // Request next frame
            };
            tick();
        }

        // Creates and returns a WebGL buffer
        function initBuffer(gl) {
            var buffer = gl.createBuffer(); // Create buffer
            if (!buffer) {
                console.log('Failed to create buffer');
                return null;
            }
            return buffer;
        }

        // Updates the buffer with vertex data
        function updateBuffer(gl, buffer, objects, color) {
            var vertices = [];
            // Generate vertex data for each object
            objects.forEach(obj => {
                vertices.push(
                    obj.x - 0.05, obj.y + 0.05, ...color, // Top-left
                    obj.x - 0.05, obj.y - 0.05, ...color, // Bottom-left
                    obj.x + 0.05, obj.y + 0.05, ...color, // Top-right
                    obj.x + 0.05, obj.y - 0.05, ...color  // Bottom-right
                );
            });

            gl.bindBuffer(gl.ARRAY_BUFFER, buffer); // Bind buffer
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.DYNAMIC_DRAW); // Set data
        }

        function draw(gl, u_ModelMatrix) {
            gl.clearColor(0.0, 0.0, 0.0, 1.0);
            gl.clear(gl.COLOR_BUFFER_BIT);

            drawBuffer(gl, buffers.green, greenSnake.length, u_ModelMatrix);
            drawBuffer(gl, buffers.red, redSnake.length, u_ModelMatrix);
            drawBuffer(gl, buffers.food, foodPositions.length, u_ModelMatrix);
        }

        function drawBuffer(gl, buffer, count, u_ModelMatrix) {
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            var FSIZE = Float32Array.BYTES_PER_ELEMENT;
            
            // Set up the position attribute
            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
            gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, FSIZE * 5, 0);
            gl.enableVertexAttribArray(a_Position);

            // Set up the color attribute
            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 5, FSIZE * 2);
            gl.enableVertexAttribArray(a_Color);

            // Apply transformation
            modelMatrix.setIdentity();
            gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);

            // Draw the buffer
            for (let i = 0; i < count; i++) {
                gl.drawArrays(gl.TRIANGLE_STRIP, i * 4, 4);
            }
        }

        // Handles direction changes based on keyboard input 
        function changeDirection(ev) {
            if (!gameStarted) gameStarted = true; // Start game on first input

            // Green snake controls (WSAD keys)
            if (ev.keyCode === 87 && lastGreenDirection.dy !== -0.02) greenDirection = {dx: 0.0, dy: 0.02};
            if (ev.keyCode === 83 && lastGreenDirection.dy !== 0.02) greenDirection = {dx: 0.0, dy: -0.02};
            if (ev.keyCode === 65 && lastGreenDirection.dx !== 0.02) greenDirection = {dx: -0.02, dy: 0.0};
            if (ev.keyCode === 68 && lastGreenDirection.dx !== -0.02) greenDirection = {dx: 0.02, dy: 0.0};

            // Red snake controls (arrow keys)
            if (ev.keyCode === 38 && lastRedDirection.dy !== -0.02) redDirection = {dx: 0.0, dy: 0.02};
            if (ev.keyCode === 40 && lastRedDirection.dy !== 0.02) redDirection = {dx: 0.0, dy: -0.02};
            if (ev.keyCode === 37 && lastRedDirection.dx !== 0.02) redDirection = {dx: -0.02, dy: 0.0};
            if (ev.keyCode === 39 && lastRedDirection.dx !== -0.02) redDirection = {dx: 0.02, dy: 0.0};
        }
        
        // Create the animations
        function updatePositions(gl) {
            updateSnake(greenSnake, greenDirection);
            updateSnake(redSnake, redDirection);
            lastGreenDirection = { ...greenDirection };
            lastRedDirection = { ...redDirection };

            checkHeadBodyCollision();
            checkOutOfBounds();
            checkWinCondition();

            // Detect collision with food
            foodPositions.forEach((food, i) => {
                if (detectCollision(greenSnake[0].x, greenSnake[0].y, food.x, food.y)) {
                    greenScore++; // Update score
                    growSnake(greenSnake); // Add segments
                    foodPositions[i] = spawnFood(); // Create new food object
                } else if (detectCollision(redSnake[0].x, redSnake[0].y, food.x, food.y)) {
                    redScore++;
                    growSnake(redSnake);
                    foodPositions[i] = spawnFood();
                }
            });

            updateBuffer(gl, buffers.green, greenSnake, [0.0, 1.0, 0.0]);
            updateBuffer(gl, buffers.red, redSnake, [1.0, 0.0, 0.0]);
            updateBuffer(gl, buffers.food, foodPositions, [1.0, 1.0, 0.0]);

            // On screen score
            document.getElementById('greenScore').textContent = greenScore;
            document.getElementById('redScore').textContent = redScore;
        }

        // Ends the game if player is detected outside canvas
        function checkOutOfBounds() {
            if (isOutOfBounds(greenSnake[0])) {
                alert("Red Player Wins! Green Snake went out of bounds.");
                location.reload();
            } else if (isOutOfBounds(redSnake[0])) {
                alert("Green Player Wins! Red Snake went out of bounds.");
                location.reload();
            }
        }
        // Check if the score is achived
        function checkWinCondition() {
            if (greenScore >= WIN_SCORE) {
                alert("Green Player Wins!");
                location.reload();
            } else if (redScore >= WIN_SCORE) {
                alert("Red Player Wins!");
                location.reload();
            }
        }
        // Check player hitting other player win condition
        function checkHeadBodyCollision() {
            if (headCollidesWithBody(greenSnake[0], redSnake)) {
                alert("Red Player Wins! Green Snake collided with Red Snake.");
                location.reload();
            } else if (headCollidesWithBody(redSnake[0], greenSnake)) {
                alert("Green Player Wins! Red Snake collided with Green Snake.");
                location.reload();
            }
        }
        // Check is a given head gollides with a given body
        function headCollidesWithBody(head, body) {
            for (let i = 1; i < body.length; i++) {
                if (detectCollision(head.x, head.y, body[i].x, body[i].y)) {
                    return true;
                }
            }
            return false;
        }

        // Create animation by moving each segment of the snake
        function updateSnake(snake, direction) {
            for (let i = snake.length - 1; i > 0; i--) {
                snake[i].x = snake[i - 1].x;
                snake[i].y = snake[i - 1].y;
            }
            snake[0].x += direction.dx;
            snake[0].y += direction.dy;
        }

        // Add segments to the snake when food is eaten
        function growSnake(snake) {
            const growAmount = 5;
            const lastSegment = snake[snake.length - 1];
            const secondLastSegment = snake.length > 1 ? snake[snake.length - 2] : lastSegment;

            const dx = lastSegment.x - secondLastSegment.x;
            const dy = lastSegment.y - secondLastSegment.y;

            for (let i = 0; i < growAmount; i++) {
                snake.push({x: lastSegment.x - dx * (i + 1), y: lastSegment.y - dy * (i + 1)});
            }
        }

        // Food randomizer
        function spawnFood() {
            return { x: (Math.random() - 0.5) * 2, y: (Math.random() - 0.5) * 2 };
        }
        // Initialize 3 different food objects
        function initFood() {
            foodPositions = [spawnFood(), spawnFood(), spawnFood()];
        }
        // Detect collision with food
        function detectCollision(px, py, fx, fy) {
            return Math.abs(px - fx) < 0.1 && Math.abs(py - fy) < 0.1;
        }
        // Check if head has gone outside of canvas
        function isOutOfBounds(segment) {
            return segment.x < -1 || segment.x > 1 || segment.y < -1 || segment.y > 1;
        }
    </script>
</body>
</html>
